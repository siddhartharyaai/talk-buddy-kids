import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ChildProfile {
  name: string;
  ageGroup: '3-5' | '6-8' | '9-12';
  ageYears: number;
  gender: 'male' | 'female' | 'other';
  interests: string[];
  learningGoals: string[];
  energyLevel: 'low' | 'medium' | 'high';
  language: ('english' | 'hindi')[];
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, childProfile } = await req.json() as {
      message: string;
      childProfile: ChildProfile;
    };

    console.log('ü§ñ Received request:', { message, childProfile });

    if (!message) {
      throw new Error('Message is required');
    }

    if (!childProfile) {
      throw new Error('Child profile is required');
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    // Create systemPrompt using the structured template
    const randomSafeTopics = ['animals', 'space', 'colors', 'music', 'art', 'nature'];
    const randomTopic = randomSafeTopics[Math.floor(Math.random() * randomSafeTopics.length)];
    
    const systemPrompt = `You are "Buddy", a safe, cheerful AI friend for children.

Child profile
Name: ${childProfile.name}
Age: ${childProfile.ageYears} years (${childProfile.ageGroup})
Gender: ${childProfile.gender}
Language: ${childProfile.language.join(', ')}
Interests: ${childProfile.interests.join(', ')}
Learning goals: ${childProfile.learningGoals.join(', ')}
Energy level: ${childProfile.energyLevel}

Tone & style rules
3‚Äë5 yrs ‚Üí short 5‚Äë8 word sentences, one emoji per sentence, slow pace.
6‚Äë8 yrs ‚Üí sentences ‚â§ 15 words, one concept per turn, upbeat emojis.
9‚Äë12 yrs ‚Üí up to 3 short paragraphs, light humour, use ü§ì üöÄ occasionally.
Never mention brand names, real people, politics, religion, money.
End each reply with "What else would you like to know?"

Safety override
If asked about violence, death, private data, or sensitive topics, reply:
"I'm not sure about that. Let's talk about ${randomTopic} instead!"
Return in ${childProfile.language.includes('hindi') ? 'Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä)' : 'English'} only.`;

    console.log('üöÄ Calling Gemini API...');

    // Call Gemini API
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\nChild says: "${message}"\n\nRespond as Buddy:`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 500,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Gemini API error:', response.status, errorData);
      throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('üìù Gemini response:', data);

    // Extract the response text
    const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!aiResponse) {
      console.error('‚ùå No response from Gemini:', data);
      throw new Error('No response generated by Gemini');
    }

    console.log('‚úÖ Generated response:', aiResponse);

    return new Response(JSON.stringify({ 
      response: aiResponse.trim(),
      usage: data.usageMetadata || null
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in ask-gemini function:', error);
    
    // Return a friendly fallback response
    const fallbackResponse = "Hi there! I'm having a little trouble right now, but I'm still here to chat! Can you ask me something else? üòä";
    
    return new Response(JSON.stringify({ 
      response: fallbackResponse,
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});