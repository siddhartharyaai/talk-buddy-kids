import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ChildProfile {
  name: string;
  age: number;
  interests: string[];
  safetyLevel: 'low' | 'medium' | 'high';
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, childProfile } = await req.json() as {
      message: string;
      childProfile: ChildProfile;
    };

    console.log('ü§ñ Received request:', { message, childProfile });

    if (!message) {
      throw new Error('Message is required');
    }

    if (!childProfile) {
      throw new Error('Child profile is required');
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    // Create kid-friendly system prompt based on profile
    const systemPrompt = `You are Buddy, a friendly AI companion for kids. You're talking to ${childProfile.name}, who is ${childProfile.age} years old.

Key guidelines:
- Use simple, age-appropriate language for a ${childProfile.age}-year-old
- Be enthusiastic and encouraging
- Keep responses short (1-3 sentences max)
- Focus on these interests: ${childProfile.interests.join(', ')}
- Safety level: ${childProfile.safetyLevel}
- Always be positive and educational
- If asked inappropriate questions, redirect to something fun and educational
- Use emojis occasionally to be more engaging
- Never mention scary, violent, or inappropriate content

Examples of good responses:
- "That's such a cool question! Let me tell you something amazing about..."
- "Wow, I love that you're curious about... Here's something fun..."
- "Great idea! Did you know that..."

Remember: You're a friendly buddy who loves learning and having fun conversations!`;

    console.log('üöÄ Calling Gemini API...');

    // Call Gemini API
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\nChild says: "${message}"\n\nRespond as Buddy:`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 200,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Gemini API error:', response.status, errorData);
      throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('üìù Gemini response:', data);

    // Extract the response text
    const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!aiResponse) {
      console.error('‚ùå No response from Gemini:', data);
      throw new Error('No response generated by Gemini');
    }

    console.log('‚úÖ Generated response:', aiResponse);

    return new Response(JSON.stringify({ 
      response: aiResponse.trim(),
      usage: data.usageMetadata || null
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in ask-gemini function:', error);
    
    // Return a friendly fallback response
    const fallbackResponse = "Hi there! I'm having a little trouble right now, but I'm still here to chat! Can you ask me something else? üòä";
    
    return new Response(JSON.stringify({ 
      response: fallbackResponse,
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});